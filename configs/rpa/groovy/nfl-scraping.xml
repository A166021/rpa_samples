<?xml version="1.0" encoding="UTF-8"?>
<!-- {{
For this example need file with input data.

File format *.csv

from - int (year 2014)
to - int (year 2016)

 -->
 <config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config" scriptlang="groovy">
	<selenium-flow>
		<selenium name="seleniumDriver" browser="chrome" close-on-completion="true" start-in-private="true">
			<script><![CDATA[
				// import additional library
				import org.openqa.selenium.support.ui.*;
				import java.util.concurrent.TimeUnit;
				
				// setup driver options
				driver().manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS).pageLoadTimeout(1, TimeUnit.MINUTES);

				// opening of processed URL
				open("http://www.nfl.com/stats/categorystats?tabSeq=0&statisticCategory=PASSING&season=2016&seasonType=REG");
				
				// creation of the list with maps for statistics
				List<Map<String, String>> stats = new ArrayList<>();
					
				// read 'from - to' period from input data file
				int fromYear = Integer.valueOf(from.toString());
				int toYear = Integer.valueOf(to.toString());
				
				// {{ Iterator by every year in period
				fromYear.upto(toYear) { year ->
					// {{ obtaining the page with the table of data on the specified settings
					// finding of an element for the indication of year
					WebElement seasonSelection = driver().findElement(By.id("season-dropdown"));
					// obtaining list of the choice
					Select seasonSelect = new Select(seasonSelection);
					// set year by value
					seasonSelect.selectByVisibleText(String.valueOf(year));
					// click 'go' and obtain the page with data
					$(byXpath("//input[@value='Go']")).click();
					// }}

					// set flag 'nextPageAvailable' for parse data
					boolean nextPageAvailable = true;
					
					// parsing data
					while (nextPageAvailable) {
						// initialize data list by xpath
						UiElementCollection rows = $$(byXpath("//*[@id='result']/tbody[2]/tr"));
						// parse data list
						rows.each { row ->
							// creation of the statistics map
							Map<String, String> dataRow = new LinkedHashMap<>();
							// return html text on a row 
							String html = (String)((JavascriptExecutor)driver()).executeScript("return arguments[0].outerHTML;", row);
							// set data on a row to map by xpath
							dataRow.put("rnk", sys.xpath("//td[1]/text()", html).toString().trim());
							dataRow.put("player", sys.xpath("//td[2]/a/text()", html).toString().trim());
							dataRow.put("team", sys.xpath("//td[3]/a/text()", html).toString().trim());
							dataRow.put("pos", sys.xpath("//td[4]/text()", html).toString().trim());
							dataRow.put("comp", Double.valueOf(sys.xpath("//td[5]/text()", html).toString().trim()));
							dataRow.put("att", Double.valueOf(sys.xpath("//td[6]/text()", html).toString().trim()));
							dataRow.put("pct", sys.xpath("//td[7]/text()", html).toString().trim());
							dataRow.put("attg", sys.xpath("//td[8]/text()", html).toString().trim());
							dataRow.put("yds", sys.xpath("//td[9]/text()", html).toString().trim());
							dataRow.put("avg", sys.xpath("//td[10]/text()", html).toString().trim());
							dataRow.put("ydsg", sys.xpath("//td[11]/text()", html).toString().trim());
							dataRow.put("td", Double.valueOf(sys.xpath("//td[12]/text()", html).toString().trim()));
							dataRow.put("int", Double.valueOf(sys.xpath("//td[13]/text()", html).toString().trim()));
							dataRow.put("1st", sys.xpath("//td[14]/text()", html).toString().trim());
							dataRow.put("1StPgnt", sys.xpath("//td[15]/text()", html).toString().trim());
							dataRow.put("lng", sys.xpath("//td[16]/text()", html).toString().trim());
							dataRow.put("20", sys.xpath("//td[17]/text()", html).toString().trim());
							dataRow.put("40", sys.xpath("//td[18]/text()", html).toString().trim());
							dataRow.put("sck", sys.xpath("//td[19]/text()", html).toString().trim());
							dataRow.put("rate", Double.valueOf(sys.xpath("//td[20]/text()", html).toString().trim()));
							// adding parse data to the statistics list
							stats.add(dataRow)
						}
						
						// try find next page
						List<WebElement> nextLinks = driver().findElements(By.xpath("//a[text()='next']"));
						nextPageAvailable = !nextLinks.isEmpty();
						// if next page is found try to parse data else go out from the cycle
						if (nextPageAvailable) {
							nextLinks.get(0).click();
						}
					}
				}
				// }} Iterator by every year in period

				// creation linked hash map with statistics by Player
				def byPlayer = stats.findAll({it.get("pos").equals("QB")}).groupBy{it['player']};
				// creation empty linked hash map
				def result = [:]
				
				// calculate player statistic and inject it into result
				byPlayer.each { k,v ->
					result[(k)] = v.inject([:].withDefault{0}, {acc, val ->
						acc['comp'] += val['comp']
						acc['att'] += val['att']
						acc['td'] += val['td']
						acc['int'] += val['int']
						acc['rate'] += val['rate']
						acc
					})
                  
					result[(k)]['rate'] /= v.size();
					result[(k)]['player'] = k
				}
				
				// {{ creation final stats list
				def finalStats = []
				result.each {k,v-> finalStats << v}
				// }}
				
				sys.defineVariable("result", finalStats);
				
				// {{ creation columns set if final stat size > 0
				Set<String> columns = new HashSet();
				if(finalStats.size()>0) {
					columns = finalStats.get(0).keySet();
				}
				// }}
				sys.defineVariable("columns", columns);
			]]></script>
		</selenium>
	</selenium-flow>

	<!-- {{ export data to datastore -->
	<export include-original-data="false">
		<multi-column list="${result.toList()}" split-results="true">
			<loop item="columnName">
				<list>
					<script return="columns" />
				</list>
				<body>
					<put-to-column-getter name="${columnName}" property="${columnName}" />
				</body>
			</loop>
		</multi-column>
	</export>
	<!-- }} export data to datastore -->
</config>